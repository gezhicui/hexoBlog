<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/MyBlog/2020/06/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown的学习使用</title>
    <url>/MyBlog/2020/06/12/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%86%B2%E5%86%B2%E5%86%B2/</url>
    <content><![CDATA[<h1 id="杨雨翔"><a href="#杨雨翔" class="headerlink" title="杨雨翔"></a>杨雨翔</h1><h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a>

<ul>
<li>列表1</li>
<li>列表2<br>  a 子列表<br>  b 子列表</li>
<li>列表3</li>
</ul>
<hr>
<hr>
<p><a href="https://gitee.com/yang_yu_xiang" target="_blank" rel="noopener">我的gitee导航</a><br><img src="https://gitee.com/yang_yu_xiang/BlogImages/raw/master/img/psb.jpg" alt="插入图片"></p>
<p><em>字体变成斜的</em><br><strong>字体加粗了呀</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>哈哈嘻嘻</code></p>
<blockquote>
<p>我的内容是引用的</p>
</blockquote>
<p><code>在视频连接中插入 class=&quot;bilibili&quot;</code></p>
<iframe class="bilibili" src="//player.bilibili.com/player.html?aid=286039785&bvid=BV1mf4y1y7pp&cid=202160057&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解js的防抖和节流</title>
    <url>/MyBlog/2020/06/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>&emsp; 防抖和节流严格算起来应该属于性能优化的知识，但实际上遇到的频率相当高，在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，处理不当或者放任不管就容易会加重浏览器和服务器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。 </p>
<h1 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h1><p><code>函数防抖（debounce）</code>：当<strong>持续触发事件</strong>时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就<strong>重新开始延时</strong>。</p>
<p>一起来实现个简单的debounce</p>
<a id="more"></a>
<h2 id="防抖debounce代码："><a href="#防抖debounce代码：" class="headerlink" title="防抖debounce代码："></a>防抖debounce代码：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取按钮并绑定事件</span></span><br><span class="line">    <span class="keyword">var</span> myDebounce = <span class="built_in">document</span>.getElementById(<span class="string">"debounce"</span>);</span><br><span class="line">    myDebounce.addEventListener(<span class="string">"click"</span>,debounce(sayDebounce));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//防抖功能函数，接受传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个标记用来存放定时器的返回值</span></span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//每次当用户点击、输入的时候，把前一个定时器消除</span></span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        <span class="comment">//创建一个新的setTimeout，这样能保证点击按钮后的间隔内，</span></span><br><span class="line">        <span class="comment">//如果用户还点击的话，就不会执行fn函数</span></span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//防抖事件的处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayDebounce</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...有些需要防抖的工作，在这里进行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"防抖成功~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h1><p><code>函数节流（throttle）</code>：当<strong>持续触发事件</strong>时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如<strong>持续触发scroll事件时，并不立即执行scroll事件触发的函数，每隔一定时间才会执行一次scorll事件触发的函数</strong>。</p>
<h2 id="节流throttle代码（定时器）："><a href="#节流throttle代码（定时器）：" class="headerlink" title="节流throttle代码（定时器）："></a>节流throttle代码（定时器）：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取按钮并绑定事件</span></span><br><span class="line">    <span class="keyword">var</span> myThrottle = <span class="built_in">document</span>.getElementById(<span class="string">"throttle"</span>);</span><br><span class="line">    myThrottle.addEventListener(<span class="string">"click"</span>,throttle(sayThrottle));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//节流函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//通过闭包保存一个标记</span></span><br><span class="line">    <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在函数开头判断标志是否为true，不为true则中断函数</span></span><br><span class="line">        <span class="keyword">if</span>(!canRun)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将canRun设置为false，防止执行之前再被执行</span></span><br><span class="line">        canRun  = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//定时器</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">//执行完事件(例如调用完接口)之后，重新将这个标志设true</span></span><br><span class="line">            canRun  = <span class="literal">true</span>;</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//需要节流的事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayThrottle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...有些需要防抖的工作，在这里进行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"节流成功~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="其他应用场景"><a href="#其他应用场景" class="headerlink" title="其他应用场景"></a>其他应用场景</h1><p>讲完了这两个技巧，下面介绍一下平时开发中常遇到的场景：</p>
<ul>
<li>搜索框input事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者实现输入间隔大于某个值（如500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。</li>
<li>页面resize事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行dom渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况）</li>
</ul>
<p>参考文章：<a href="https://segmentfault.com/a/1190000018428170" target="_blank" rel="noopener">浅谈js的防抖和节流</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>防抖</tag>
        <tag>节流</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的原型和原型链</title>
    <url>/MyBlog/2020/06/16/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p>在ES6之前，面向对象是通过构造函数来实现的。构造函数的方法很好用，但是存在一个<strong>浪费内存</strong>的问题。</p>
<p><img src="https://gitee.com/yang_yu_xiang/BlogImages/raw/master/img/gouzaohanshu.png" alt=""></p>
<p>如图，每创建一个对象，都要开辟一个新的内存区域，<strong>我们希望所有的对象使用同一个函数，这样就比较节省内存，那么我们要怎样做呢？</strong></p>
<h1 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h1><a id="more"></a>
<p> &emsp;&emsp;构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。<br> JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。称为<strong><em>原型对象</em></strong></p>
<p> &emsp;&emsp;我们可以把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法。这就是原型的作用</p>
<p> &emsp;&emsp;举个栗子<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决构造函数的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">star</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把sing方法挂载到原型上</span></span><br><span class="line">star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> star(<span class="string">'张学友'</span>, <span class="number">18</span>);</span><br><span class="line">ldh.sing()</span><br><span class="line">zxy.sing()</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="对象原型proto"><a href="#对象原型proto" class="headerlink" title="对象原型proto"></a>对象原型<strong>proto</strong></h1><p> &emsp;&emsp;对象都会有一个属性<strong>proto</strong>指向构造数的prototype原型对象，之 以我们对可以使用构造函数prototype原型对象的性和方法，就是因为对象 <strong>proto</strong>原型的存在。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">console</span>.log(ldh.__proto__===star.prototype);</span><br><span class="line"> <span class="comment">//输出结果为true</span></span><br><span class="line"> <span class="comment">//方法的查找规则：首先先看1dh对象身上是否有sing方法，如果有就执行这个对象上的sing</span></span><br><span class="line"><span class="comment">//如果么有sing这个方法，因为有_proto的存在，就去构造函数原型对象prototype身上去查找sing这个方法I</span></span><br></pre></td></tr></table></figure>
<p> &emsp;&emsp;proto对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype<br><img src="https://gitee.com/yang_yu_xiang/BlogImages/raw/master/img/proto.png" alt=""></p>
<hr>
<h1 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h1><p>&emsp;&emsp;对象原型（ <em>proto</em> ）和构造函数（prototype）原型对象里面都有一个属性constructor属性，constructor我们称为构造函数，因为它指回构造函数本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.__proto__.constructor);</span><br><span class="line"><span class="comment">//输出的都是star这个构造函数</span></span><br></pre></td></tr></table></figure>
<p>当我们想在prototype上添加多个方法的时候：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">star.prototype=&#123;</span><br><span class="line">    sing:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    movie:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我会演电影'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这个时候，protptype被完全覆盖掉了</strong><br>我们就要添加一个语句让prototype重新指回构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>: star</span><br><span class="line">//如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用<span class="keyword">constructor</span>指回原来的构造函数</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="构造函数、实例、原型对象三者之间的关系"><a href="#构造函数、实例、原型对象三者之间的关系" class="headerlink" title="构造函数、实例、原型对象三者之间的关系"></a>构造函数、实例、原型对象三者之间的关系</h1><p><img src="https://gitee.com/yang_yu_xiang/BlogImages/raw/master/img/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB.png" alt=""></p>
<hr>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>&emsp;&emsp;<strong>只要是对象就有_proto原型，指向原型对象</strong></p>
<p>一张图看懂原型链：<br><img src="https://gitee.com/yang_yu_xiang/BlogImages/raw/master/img/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt=""></p>
<ul>
<li><p>我们star原型对象里面的_proto_原型指向的是Object.prototype</p>
</li>
<li><p>我们object.prototype原型对象里面的_proto_原型指向为null</p>
</li>
</ul>
<hr>
<h1 id="JavaScript的成员查找机制（规则）"><a href="#JavaScript的成员查找机制（规则）" class="headerlink" title="JavaScript的成员查找机制（规则）"></a>JavaScript的成员查找机制（规则）</h1><ul>
<li><p>当访问一个对象的属性（包括方法）时，首先找这个<strong>对象自身</strong>有没有该属性。</p>
</li>
<li><p>如果没有就查找它的原型（也就是_proto_指向的（<strong>prototype原型对象</strong>）。</p>
</li>
<li><p>如果还没有就查找原型对象的原型（<strong>Object的原型对象</strong>）。</p>
</li>
<li><p>依此类推一直找到Object为止（<strong>null</strong>）。</p>
</li>
</ul>
<hr>
<h1 id="原型对象中的this指向问题"><a href="#原型对象中的this指向问题" class="headerlink" title="原型对象中的this指向问题"></a>原型对象中的this指向问题</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">star.protptype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'sing'</span>)</span><br><span class="line">    that = <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> star(<span class="string">'刘德华'</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment">//在构造函数中，里面this指向的是对象实例ldh</span></span><br><span class="line">ldh.sing();</span><br><span class="line"><span class="built_in">console</span>.log(that === <span class="keyword">this</span>) </span><br><span class="line"><span class="comment">//输出结果为true</span></span><br><span class="line"><span class="comment">//原型对象函数里面的this 指向的是实例对象ldh</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>原型</tag>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>js中字符串常用方法</title>
    <url>/MyBlog/2020/06/16/js%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1、toLowerCase(): 把字符串转为小写，返回新的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//Hello World</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>2、toUpperCase(): 把字符串转为大写，返回新的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//hello world</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//HELLO WORLD</span></span><br></pre></td></tr></table></figure>
<hr>
<p>3、charAt(): 返回指定下标位置的字符。如果index不在0-str.length(不包含str.length)之间，返回空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.charAt(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//6</span></span><br></pre></td></tr></table></figure>
<hr>
<p>4、charCodeAt(): 返回指定下标位置的字符的unicode编码,这个返回值是 0 - 65535 之间的整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.charCodeAt(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> str2=str.charCodeAt(<span class="number">-2</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//101</span></span><br></pre></td></tr></table></figure>
<hr>
<p>5、indexOf(): 返回某个指定的子字符串在字符串中第一次出现的位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.indexOf(<span class="string">"o"</span>);</span><br><span class="line"><span class="keyword">var</span> str2=str.indexOf(<span class="string">"world"</span>);</span><br><span class="line"><span class="keyword">var</span> str3=str.indexOf(<span class="string">"o"</span>,str1+<span class="number">1</span>);<span class="comment">//注意：indexOf()方法对大小写敏感，如果子字符串没有找到，返回-1。第二个参数表示从哪个下标开始查找，没有写则默认从下标0开始查找。</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//4 默认只找第一个关键字位置，从下标0开始查找</span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//-1 没有找到</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//7</span></span><br></pre></td></tr></table></figure>
<hr>
<p>6、lastIndexOf(): 返回某个指定的子字符串在字符串中最后出现的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.lastIndexOf(<span class="string">"o"</span>);</span><br><span class="line"><span class="keyword">var</span> str2=str.lastIndexOf(<span class="string">"world"</span>);</span><br><span class="line"><span class="keyword">var</span> str3=str.lastIndexOf(<span class="string">"o"</span>,str1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//7</span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//4</span></span><br><span class="line"><span class="comment">//注意：lastIndexOf()方法对大小写敏感，如果子字符串没有找到，返回-1。第二个参数表示从哪个下标开始查找，没有写则默认从最后一个字符处开始查找。</span></span><br></pre></td></tr></table></figure>
<hr>
<p>7、slice(): 返回字符串中提取的子字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.slice(<span class="number">2</span>); <span class="comment">//如果只有一个参数，则提取开始下标到结尾处的所有字符串</span></span><br><span class="line"><span class="keyword">var</span> str2=str.slice(<span class="number">2</span>,<span class="number">7</span>); <span class="comment">//两个参数，提取下标为2，到下标为7但不包含下标为7的字符串</span></span><br><span class="line"><span class="keyword">var</span> str3=str.slice(<span class="number">-7</span>,<span class="number">-2</span>); <span class="comment">//如果是负数，-1为字符串的最后一个字符。提取从下标-7开始到下标-2但不包含下标-2的字符串。前一个数要小于后一个数，否则返回空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//llo World</span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//llo W</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//o Wor</span></span><br></pre></td></tr></table></figure>
<hr>
<p>8、substring(): 提取字符串中介于两个指定下标之间的字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.substring(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> str2=str.substring(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> str3=str.substring(<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//llo World</span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//如果两个参数相等，返回长度为0的空串</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//llo W</span></span><br><span class="line"><span class="comment">//注意：substring()用法与slice()一样，但不接受负值的参数。</span></span><br></pre></td></tr></table></figure>
<hr>
<p>9、substr(): 返回从指定下标开始指定长度的的子字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.substr(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> str2=str.substr(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> str3=str.substr(<span class="number">-3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//ello World </span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//ell</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//rl</span></span><br><span class="line"><span class="comment">//注意：如果没有指定length,返回从下标开始处结尾处的所有字符串。</span></span><br></pre></td></tr></table></figure>
<hr>
<p>10、split(): 把字符串分割成字符串数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"AA BB CC DD"</span>;</span><br><span class="line"><span class="keyword">var</span> string1=<span class="string">"1:2:3:4:5"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.split(<span class="string">""</span>);<span class="comment">//如果把空字符串 ("")用作分割符，那么字符串的每个字符之间都会被分割</span></span><br><span class="line"><span class="keyword">var</span> str2=str.split(<span class="string">" "</span>); <span class="comment">//以空格为分隔符</span></span><br><span class="line"><span class="keyword">var</span> str3=str.split(<span class="string">""</span>,<span class="number">4</span>); <span class="comment">//4指定返回数组的最大长度</span></span><br><span class="line"><span class="keyword">var</span> str4=string1.split(<span class="string">":"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// ["A", "A", " ", "B", "B", " ", "C", "C", " ", "D", "D"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">//["AA" "BB" "CC" "DD"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">//["A", "A", " ", "B"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str4); <span class="comment">// ["1", "2", "3", "4", "5"]</span></span><br></pre></td></tr></table></figure>
<hr>
<p>11、replace(): 在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"hello WORLD"</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/o/ig</span>; <span class="comment">//o为要替换的关键字，不能加引号，否则替换不生效，i忽略大小写，g表示全局查找。</span></span><br><span class="line"><span class="keyword">var</span> str1=str.replace(reg,<span class="string">"**"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//hell** W**RLD</span></span><br></pre></td></tr></table></figure>
<hr>
<p>12、match(): 返回所有查找的关键字内容的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"To be or not to be"</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/to/ig</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//["To", "to"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">"Hello"</span>)); <span class="comment">//null</span></span><br></pre></td></tr></table></figure>
<p>原文地址：<a href="https://www.cnblogs.com/Yimi/p/10362214.html" target="_blank" rel="noopener">JS字符串常用方法总结</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
